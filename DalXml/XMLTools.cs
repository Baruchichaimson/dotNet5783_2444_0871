using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Threading.Tasks;
using DO;
using System.Xml;

namespace Dal
{
    public static class XMLTools
    {
        const string s_dir = @"..\xml\";
        /// <summary>
        /// This constructor ensures that the specified directory exists
        /// before any operation is done on the files in it.
        /// </summary>
        static XMLTools()
        {
            if (!Directory.Exists(s_dir))
                Directory.CreateDirectory(s_dir);
        }
        /// <summary>
        /// This method returns the directory path where the XML files are stored.
        /// </summary>
        /// <returns></returns>
        public static string GetDir()
        {
            return  s_dir;
        }
        /// <summary>
        /// This method serializes a list of nullable structs to an XML file using XmlSerializer.
        /// </summary>
        /// <typeparam name="T">The type of struct to serialize</typeparam>
        /// <param name="list">The list of structs to serialize</param>
        /// <param name="entity">The name of the entity to save in the file</param>
        public static void SaveListToXMLSerializer<T>(List<T?> list, string entity) where T : struct
        {
            string filePath = $"{s_dir + entity}.xml";
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<T?>));
                using (FileStream stream = new FileStream(filePath, FileMode.Create,FileAccess.Write,FileShare.None))
                {
                    XmlWriterSettings settings = new XmlWriterSettings();
                    settings.Indent = true;
                    settings.NewLineOnAttributes = true;
                    using (XmlWriter writer = XmlWriter.Create(stream, settings))
                    {
                        serializer.Serialize(writer, list);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An error occurred while serializing the list: " + ex.Message);
            }
        }
        /// <summary>
        /// Loads a list of objects of type T from an XML file using the XmlSerializer class.
        /// The file path is generated by concatenating the s_dir variable with the name of the entity.
        /// </summary>
        /// <typeparam name="T">The type of objects to be loaded from the XML file. Must be a struct.</typeparam>
        /// <param name="entity">The name of the entity, used to generate the file path.</param>
        /// <returns>A list of objects of type T.</returns>
        /// <exception cref="Exception">Thrown when an error occurs while deserializing the file.</exception>
        public static List<T?> LoadListFromXMLSerializer<T>(string entity) where T : struct
        {
            string filePath = $"{s_dir + entity}.xml";
            try
            {
                if (!File.Exists(filePath)) return new();
                XmlSerializer serializer = new XmlSerializer(typeof(List<T?>));
                using (FileStream stream = new FileStream(filePath, FileMode.Open))
                {
                    return serializer.Deserialize(stream) as List<T?> ?? new();
                }
            }
            catch (Exception ex)
            {
               throw new Exception("An error occurred while deserializing the file: " + ex.Message);
            }           
        }
    }
}
